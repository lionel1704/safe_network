name: PR Tests

on: pull_request

env:
  # Turn on backtrace as needed. Generally (passing) CI should not need this.
  # RUST_BACKTRACE: 1
  # Deny all compiler warnings.
  RUSTFLAGS: "-D warnings"
  RUST_LOG: "safe_network,sn_api,sn_node=trace"
  SAFE_AUTH_PASSPHRASE: "x"
  SAFE_AUTH_PASSWORD: "y"
  NODE_COUNT: 11
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: 'eu-west-2'
  POST_TEST_SLEEP: 5

jobs:     
  e2e:
    name: E2E tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [self-hosted-windows, self-hosted-ubuntu]
    steps:
      - uses: actions/checkout@v2

      - name: Build sn bins
        # all = all crates in workspace, lib/bins targets, with these features...
        run: cargo build -p safe_network --release --features=always-joinable,test-utils --bins
        timeout-minutes: 60

      # Install Rust
      - name: Install Rust
        id: toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - uses: Swatinem/rust-cache@v1
        continue-on-error: true
        with:
          cache-on-failure: true
          sharedKey: ${{github.run_id}}

      - name: Build all safe_network tests
        run: cd sn && cargo test --no-run --release --features=always-joinable,test-utils
        timeout-minutes: 60

      - name: Start the network
        run: ./target/release/testnet --interval 15000
        id: section-startup

      - name: Print Network Log Stats at start
        shell: bash
        run: ./target/release/log_cmds_inspector $HOME/.safe/node/local-test-network
        if: steps.section-startup.outcome == 'success' && matrix.os != 'windows-latest'

      - name: ubuntu install zsh
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get -y install zsh

      - name: Run network asserts one by one
        shell: bash
        # here test-threads=1 is important so we dont pollute log counts by running tests in parallel
        run: cd sn && cargo test --release --features=always-joinable,test-utils -- --ignored network_assert --test-threads=1 --skip health && sleep $POST_TEST_SLEEP
        timeout-minutes: 5
        continue-on-error: true

      # a catchall to ensure any new client api tests are run (ideally any major new section should have its own test run)
      - name: Initial client tests... (unix)
        shell: zsh {0}
        if: matrix.os != 'windows-latest'
        # always joinable not actually needed here, but should speed up compilation as we've just built with it
        run: cd sn && repeat 5 cargo test --release --features=always-joinable,test-utils -- client --skip client_api::reg --skip client_api::blob --test-threads=2 && sleep $POST_TEST_SLEEP
        timeout-minutes: 7

      # a catchall to ensure any new client api tests are run (ideally any major new section should have its own test run)
      - name: Initial client tests... (win)
        if: matrix.os == 'windows-latest'
        shell: bash
        # always joinable not actually needed here, but should speed up compilation as we've just built with it
        run: cd sn && cargo test --release --features=always-joinable,test-utils -- client --skip client_api::reg --skip client_api::blob --test-threads=2 && sleep $POST_TEST_SLEEP
        timeout-minutes: 5

      # register api
      - name: Client reg tests against local network (unix)
        shell: zsh {0}
        if: matrix.os != 'windows-latest'
        run: cd sn && repeat 5 cargo test --release --features=always-joinable,test-utils -- client_api::reg --test-threads=1 --skip ae --skip batching && sleep $POST_TEST_SLEEP
        timeout-minutes: 10

      # register api
      - name: Client reg tests against local network (win)
        shell: bash
        if: matrix.os == 'windows-latest'
        run: cd sn && cargo test --release --features=always-joinable,test-utils -- client_api::reg --test-threads=1 --skip ae --skip batching && sleep $POST_TEST_SLEEP
        timeout-minutes: 10

      # register api batching check, only run this once as it's slow, and we verify the basic tests above
      - name: Client register batching
        shell: bash
        run: cd sn && cargo test --release --features=always-joinable,test-utils -- register_batching --test-threads=1 --skip ae && sleep $POST_TEST_SLEEP
        timeout-minutes: 10

      # blob api
      - name: client blob tests against local network (unix)
        shell: zsh {0}
        if: matrix.os != 'windows-latest'
        run: cd sn && repeat 5 cargo test --release --features=always-joinable,test-utils -- client_api::blob --test-threads=1 --skip ae --skip from_many_clients  && sleep $POST_TEST_SLEEP
        timeout-minutes: 25

      # blob api
      - name: client blob tests against local network (win)
        shell: bash
        if: matrix.os == 'windows-latest'
        run: cd sn && cargo test --release --features=always-joinable,test-utils -- client_api::blob --test-threads=1 --skip ae --skip from_many_clients  && sleep $POST_TEST_SLEEP
        timeout-minutes: 15

      # ae tests api
      - name: client ae tests against local network (unix)
        shell: zsh {0}
        if: matrix.os != 'windows-latest'
        run: cd sn && repeat 5 cargo test --release --features=always-joinable,test-utils -- ae_checks --test-threads=2 && sleep $POST_TEST_SLEEP
        timeout-minutes: 15
        env:
          SN_AE_WAIT: 10

      - name: client ae tests against local network (win)
        shell: bash
        if: matrix.os == 'windows-latest'
        run: cd sn && cargo test --release --features=always-joinable,test-utils -- ae_checks --test-threads=2 && sleep $POST_TEST_SLEEP
        timeout-minutes: 10
        env:
          SN_AE_WAIT: 10

      - name: Run example app for Blob API against local network
        timeout-minutes: 10
        shell: bash
        run: cd sn && cargo run  --release  --features=always-joinable,test-utils --example client_blob

      # # many client connections
      # - name: many client test against local network
      #   shell: bash
      #   run: cd sn && cargo test --release --features=always-joinable,test-utils -- from_many_clients  && sleep $POST_TEST_SLEEP
      #   timeout-minutes: 20
      #   env:
      #     SN_QUERY_TIMEOUT: 240 # 240 secs

      - name: Are nodes still running...?
        shell: bash
        timeout-minutes: 1
        if: failure() && matrix.os != 'windows-latest'
        continue-on-error: true
        run: |
          echo "$(pgrep sn_node | wc -l) nodes still running"
          ls $HOME/.safe/node/local-test-network

      - name: Print Network Log Stats
        shell: bash
        continue-on-error: true
        run: ./target/release/log_cmds_inspector $HOME/.safe/node/local-test-network
        if: steps.section-startup.outcome == 'success' &&  matrix.os != 'windows-latest'

      - name: Upload Node Logs to AWS for Windowns
          # Upload artifacts.
        run: aws s3 sync C:\Users\runneradmin\.safe\node\local-test-network\ s3://safe-network-ci-logs/${{github.sha}}/${{ github.run_id }}-${{ github.run_number }}/${{matrix.os}}
        if: failure() &&  matrix.os == 'windows-latest'
        continue-on-error: true

      - name: Upload Node Logs to AWS for Non-Windows
          # Upload artifacts.
        run: aws s3 sync ~/.safe/node/local-test-network/ s3://safe-network-ci-logs/${{github.sha}}/${{ github.run_id }}-${{ github.run_number }}/${{matrix.os}}
        if: failure() &&  matrix.os != 'windows-latest'
        continue-on-error: true

      - name: Upload Node Logs
          # Upload artifacts.
        uses: actions/upload-artifact@v2
        with:
          name: ${{github.job.name}}_sn_node_logs_${{matrix.os}}
          path: ~/.safe/node/local-test-network/**/*.log*
        if: failure()
        continue-on-error: true
